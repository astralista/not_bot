import os
import asyncio
import re
import logging
from datetime import datetime, timedelta
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup
)
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    filters,
)
from database import Database
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from dotenv import load_dotenv
from logger_config import logger

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
(
    NAME, DOSE, INTAKES, START_DATE,
    DURATION_VALUE, DURATION_UNIT,
    BREAK_VALUE, BREAK_UNIT, CYCLES,
    EDIT_CHOICE, EDIT_FIELD
) = range(11)


class MedicationBot:
    def __init__(self, token: str):
        self.logger = logger.getChild('MedicationBot')
        self.token = token
        self.db = Database("data/users.db")
        self.application = Application.builder().token(self.token).build()
        self.setup_handlers()
        self.setup_scheduler()

    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    async def validate_date(self, date_str: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã (–ì–ì–ì–ì-–ú–ú-–î–î)"""
        if not re.match(r'^\d{4}-\d{2}-\d{2}$', date_str):
            return False
        try:
            datetime.strptime(date_str, "%Y-%m-%d")
            return True
        except ValueError:
            return False

    async def validate_number(self, text: str, min_val: int = 1, max_val: int = None) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —Ç–µ–∫—Å—Ç - —á–∏—Å–ª–æ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ"""
        if not text.isdigit():
            return False
        num = int(text)
        if num < min_val:
            return False
        if max_val is not None and num > max_val:
            return False
        return True

    async def validate_unit(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π (days/months)"""
        return text.lower() in ['days', 'months']

    def setup_handlers(self):
        # –ö–æ–º–∞–Ω–¥–∞ /start —Å –∫–Ω–æ–ø–∫–∞–º–∏
        self.application.add_handler(CommandHandler("start", self.start))

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞
        add_conv = ConversationHandler(
            entry_points=[CommandHandler("add", self.add_medication)],
            states={
                NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.set_name)],
                DOSE: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.set_dose)],
                INTAKES: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.set_intakes)],
                START_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.set_start_date)],
                DURATION_VALUE: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.set_duration_value)],
                DURATION_UNIT: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.set_duration_unit)],
                BREAK_VALUE: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.set_break_value)],
                BREAK_UNIT: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.set_break_unit)],
                CYCLES: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.set_cycles)],
            },
            fallbacks=[CommandHandler("cancel", self.cancel)],
        )
        self.application.add_handler(add_conv)

        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞
        edit_conv = ConversationHandler(
            entry_points=[CommandHandler("edit", self.edit_medication)],
            states={
                EDIT_CHOICE: [CallbackQueryHandler(self.edit_choice)],
                EDIT_FIELD: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.save_edit)],
            },
            fallbacks=[CommandHandler("cancel", self.cancel)],
            allow_reentry=True  # –î–æ–±–∞–≤–ª—è–µ–º —ç—Ç—É —Å—Ç—Ä–æ–∫—É
        )
        self.application.add_handler(edit_conv)

        # –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –ª–µ–∫–∞—Ä—Å—Ç–≤
        self.application.add_handler(CommandHandler("list", self.list_medications))

        # –£–¥–∞–ª–µ–Ω–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞
        self.application.add_handler(CommandHandler("delete", self.delete_medication))
        self.application.add_handler(CallbackQueryHandler(self.delete_confirm, pattern="^delete_"))

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ /edit
        self.application.add_handler(
            CallbackQueryHandler(
                self.handle_field_selection,
                pattern="^(name|dose|intakes|start_date|duration_value|duration_unit|break_value|break_unit|cycles)$"
            )
        )

    def setup_scheduler(self):
        scheduler = AsyncIOScheduler()
        scheduler.add_job(
            self.send_daily_notifications,
            'cron',
            hour=9,
            minute=0,
            timezone='Europe/Moscow'
        )
        scheduler.start()

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        keyboard = [["/add", "/list"], ["/edit", "/delete"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(
            "üíä –ë–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞—Ç–µ–ª—å –æ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞—Ö\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )

    # –ú–µ—Ç–æ–¥—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–µ–∫–∞—Ä—Å—Ç–≤ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
    async def add_medication(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞:")
        return NAME

    async def set_name(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        name = update.message.text.strip()
        if not name:
            await update.message.reply_text("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
            return NAME
        if len(name) > 50:
            await update.message.reply_text("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å. 50 —Å–∏–º–≤–æ–ª–æ–≤). –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
            return NAME

        context.user_data["name"] = name
        await update.message.reply_text("üíä –°–∫–æ–ª—å–∫–æ –∫–∞–ø—Å—É–ª –∑–∞ –æ–¥–∏–Ω –ø—Ä–∏–µ–º? (–¢–æ–ª—å–∫–æ —á–∏—Å–ª–æ):")
        return DOSE

    async def set_dose(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not await self.validate_number(update.message.text):
            await update.message.reply_text("‚ùå –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0. –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ø—Å—É–ª:")
            return DOSE

        context.user_data["dose"] = int(update.message.text)
        await update.message.reply_text("‚è± –°–∫–æ–ª—å–∫–æ –ø—Ä–∏–µ–º–æ–≤ –≤ —Å—É—Ç–∫–∏? (–¢–æ–ª—å–∫–æ —á–∏—Å–ª–æ):")
        return INTAKES

    async def set_intakes(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not await self.validate_number(update.message.text, 1):
            await update.message.reply_text("‚ùå –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 24. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
            return INTAKES

        intakes = int(update.message.text)
        if intakes > 24:
            await update.message.reply_text("‚ùå –ù–µ –±–æ–ª–µ–µ 24 –ø—Ä–∏–µ–º–æ–≤ –≤ —Å—É—Ç–∫–∏. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
            return INTAKES

        context.user_data["intakes"] = intakes
        await update.message.reply_text("üìÖ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –ø—Ä–∏–µ–º–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î):")
        return START_DATE

    async def set_start_date(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not await self.validate_date(update.message.text):
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:")
            return START_DATE

        context.user_data["start_date"] = update.message.text
        await update.message.reply_text("‚è≥ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏–µ–º–∞ (—á–∏—Å–ª–æ –¥–Ω–µ–π/–º–µ—Å—è—Ü–µ–≤):")
        return DURATION_VALUE

    async def set_duration_value(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not await self.validate_number(update.message.text, 1):
            await update.message.reply_text("‚ùå –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
            return DURATION_VALUE

        context.user_data["duration_value"] = int(update.message.text)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è (–Ω–∞–ø–∏—à–∏—Ç–µ 'days' –∏–ª–∏ 'months'):")
        return DURATION_UNIT

    async def set_duration_unit(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not await self.validate_unit(update.message.text):
            await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ 'days' –∏–ª–∏ 'months':")
            return DURATION_UNIT

        context.user_data["duration_unit"] = update.message.text.lower()
        await update.message.reply_text("‚è∏ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä–µ—Ä—ã–≤–∞ –º–µ–∂–¥—É –∫—É—Ä—Å–∞–º–∏ (—á–∏—Å–ª–æ –¥–Ω–µ–π/–º–µ—Å—è—Ü–µ–≤):")
        return BREAK_VALUE

    async def set_break_value(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not await self.validate_number(update.message.text, 0):
            await update.message.reply_text("‚ùå –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ 0 –∏–ª–∏ –±–æ–ª—å—à–µ. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
            return BREAK_VALUE

        context.user_data["break_value"] = int(update.message.text)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä–µ—Ä—ã–≤–∞ (–Ω–∞–ø–∏—à–∏—Ç–µ 'days' –∏–ª–∏ 'months'):")
        return BREAK_UNIT

    async def set_break_unit(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not await self.validate_unit(update.message.text):
            await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ 'days' –∏–ª–∏ 'months':")
            return BREAK_UNIT

        context.user_data["break_unit"] = update.message.text.lower()
        await update.message.reply_text("‚ôªÔ∏è –°–∫–æ–ª—å–∫–æ –≤—Å–µ–≥–æ –∫—É—Ä—Å–æ–≤? (–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, 1 –µ—Å–ª–∏ –æ–¥–∏–Ω –∫—É—Ä—Å):")
        return CYCLES

    async def set_cycles(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not await self.validate_number(update.message.text, 1):
            await update.message.reply_text("‚ùå –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
            return CYCLES

        try:
            user_data = context.user_data
            self.db.add_medication(
                user_id=update.message.from_user.id,
                name=user_data["name"],
                dose_per_intake=user_data["dose"],
                intakes_per_day=user_data["intakes"],
                start_date=user_data["start_date"],
                duration_value=user_data["duration_value"],
                duration_unit=user_data["duration_unit"],
                break_value=user_data["break_value"],
                break_unit=user_data["break_unit"],
                cycles=int(update.message.text),
            )
            await update.message.reply_text("‚úÖ –õ–µ–∫–∞—Ä—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

        return ConversationHandler.END

    # –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    # –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è
    async def handle_field_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()

        field = query.data
        self.logger.info(f"–í—ã–±—Ä–∞–Ω–æ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {field}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –ø–æ–ª–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context.user_data["edit_field"] = field

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        field_names = {
            "name": "–Ω–∞–∑–≤–∞–Ω–∏–µ",
            "dose": "–¥–æ–∑—É (—á–∏—Å–ª–æ)",
            "intakes": "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–µ–º–æ–≤ –≤ –¥–µ–Ω—å (—á–∏—Å–ª–æ)",
            "start_date": "–¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ (–ì–ì–ì–ì-–ú–ú-–î–î)",
            "duration_value": "–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (—á–∏—Å–ª–æ)",
            "duration_unit": "–µ–¥–∏–Ω–∏—Ü—ã –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (days/months)",
            "break_value": "–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä–µ—Ä—ã–≤–∞ (—á–∏—Å–ª–æ)",
            "break_unit": "–µ–¥–∏–Ω–∏—Ü—ã –ø–µ—Ä–µ—Ä—ã–≤–∞ (days/months)",
            "cycles": "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É—Ä—Å–æ–≤ (—á–∏—Å–ª–æ)"
        }

        await query.edit_message_text(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {field_names[field]}:"
        )
        return EDIT_FIELD

    async def edit_medication(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        self.logger.info(f"–ù–∞—á–∞–ª–æ –∫–æ–º–∞–Ω–¥—ã /edit –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")

        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        context.user_data.pop("edit_id", None)
        context.user_data.pop("edit_field", None)

        meds = self.db.get_medications(update.effective_user.id)
        self.logger.info(f"–ù–∞–π–¥–µ–Ω–æ –ª–µ–∫–∞—Ä—Å—Ç–≤: {len(meds)}")

        if not meds:
            self.logger.warning("–ù–µ—Ç –ª–µ–∫–∞—Ä—Å—Ç–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            await update.message.reply_text("‚ÑπÔ∏è –ù–µ—Ç –ª–µ–∫–∞—Ä—Å—Ç–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
            return ConversationHandler.END

        keyboard = [
            [InlineKeyboardButton(f"{med[2]} (ID: {med[0]})", callback_data=f"edit_{med[0]}")]
            for med in meds
        ]

        self.logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –ª–µ–∫–∞—Ä—Å—Ç–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞")
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return EDIT_CHOICE

    async def edit_choice(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()

        self.logger.info(f"–ü–æ–ª—É—á–µ–Ω callback: {query.data}")

        if query.data.startswith("edit_"):
            med_id = int(query.data.split("_")[1])
            self.logger.info(f"–í—ã–±—Ä–∞–Ω–æ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ ID: {med_id}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞
            med = self.db.get_medication_by_id(med_id)
            if not med:
                self.logger.error(f"–õ–µ–∫–∞—Ä—Å—Ç–≤–æ {med_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ë–î")
                await query.edit_message_text("‚ùå –õ–µ–∫–∞—Ä—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return ConversationHandler.END

            context.user_data["edit_id"] = med_id

            self.logger.info("–°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è")
            keyboard = [
                [InlineKeyboardButton("–ù–∞–∑–≤–∞–Ω–∏–µ", callback_data="name")],
                [InlineKeyboardButton("–î–æ–∑—É", callback_data="dose")],
                [InlineKeyboardButton("–ü—Ä–∏–µ–º–æ–≤ –≤ –¥–µ–Ω—å", callback_data="intakes")],
                [InlineKeyboardButton("–î–∞—Ç—É –Ω–∞—á–∞–ª–∞", callback_data="start_date")],
                [InlineKeyboardButton("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", callback_data="duration_value")],
                [InlineKeyboardButton("–ï–¥–∏–Ω–∏—Ü—ã –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", callback_data="duration_unit")],
                [InlineKeyboardButton("–ü–µ—Ä–µ—Ä—ã–≤", callback_data="break_value")],
                [InlineKeyboardButton("–ï–¥–∏–Ω–∏—Ü—ã –ø–µ—Ä–µ—Ä—ã–≤–∞", callback_data="break_unit")],
                [InlineKeyboardButton("–ö—É—Ä—Å—ã", callback_data="cycles")],
            ]

            try:
                self.logger.info("–ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
                await query.edit_message_text(
                    "–ß—Ç–æ –∏–º–µ–Ω–Ω–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
                self.logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ")
                return EDIT_FIELD
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
                return ConversationHandler.END

    async def save_edit(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        self.logger.info(f"–ù–∞—á–∞–ª–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è. –ö–æ–Ω—Ç–µ–∫—Å—Ç: {context.user_data}")
        self.logger.info("–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—è")

        user_id = update.effective_user.id
        self.logger.info(f"–ù–∞—á–∞–ª–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è user_id={user_id}")

        if "edit_id" not in context.user_data or "edit_field" not in context.user_data:
            self.logger.error("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ context.user_data")
            await update.message.reply_text("‚ùå –°–µ—Å—Å–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            return ConversationHandler.END

        self.logger.info(f"–î–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {context.user_data}")

        med_id = context.user_data["edit_id"]
        field = context.user_data["edit_field"]
        new_value = update.message.text.strip()

        self.logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –∏–∑–º–µ–Ω–∏—Ç—å medication_id={med_id}, –ø–æ–ª–µ={field}, –∑–Ω–∞—á–µ–Ω–∏–µ='{new_value}'")

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏
            med = self.db.get_medication_by_id(med_id)
            if not med:
                self.logger.error(f"–õ–µ–∫–∞—Ä—Å—Ç–≤–æ {med_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                await update.message.reply_text("‚ùå –õ–µ–∫–∞—Ä—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                return ConversationHandler.END

            self.logger.debug(f"–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞: {med}")

            # –í–∞–ª–∏–¥–∞—Ü–∏—è
            if field == "name":
                if len(new_value) > 50:
                    error_msg = "–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å. 50 —Å–∏–º–≤–æ–ª–æ–≤)"
                    self.logger.warning(error_msg)
                    await update.message.reply_text(f"‚ùå {error_msg}")
                    return EDIT_FIELD

            elif field in ["dose", "intakes", "duration_value", "break_value", "cycles"]:
                if not new_value.isdigit():
                    error_msg = "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ"
                    self.logger.warning(error_msg)
                    await update.message.reply_text(f"‚ùå {error_msg}")
                    return EDIT_FIELD
                if int(new_value) <= 0:
                    error_msg = "–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0"
                    self.logger.warning(error_msg)
                    await update.message.reply_text(f"‚ùå {error_msg}")
                    return EDIT_FIELD

            elif field in ["duration_unit", "break_unit"]:
                if new_value.lower() not in ["days", "months"]:
                    error_msg = "–î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: 'days' –∏–ª–∏ 'months'"
                    self.logger.warning(error_msg)
                    await update.message.reply_text(f"‚ùå {error_msg}")
                    return EDIT_FIELD

            elif field == "start_date":
                if not await self.validate_date(new_value):
                    error_msg = "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã (—Ç—Ä–µ–±—É–µ—Ç—Å—è –ì–ì–ì–ì-–ú–ú-–î–î)"
                    self.logger.warning(error_msg)
                    await update.message.reply_text(f"‚ùå {error_msg}")
                    return EDIT_FIELD

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–∏–ø
            update_value = int(new_value) if field in ["dose", "intakes", "duration_value", "break_value",
                                                       "cycles"] else new_value
            self.logger.info(f"–ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {update_value} ({type(update_value)})")

            # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î
            self.logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î...")
            self.db.update_medication(med_id, **{field: update_value})

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            updated_med = self.db.get_medication_by_id(med_id)
            if not updated_med:
                self.logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ")
            else:
                self.logger.info(f"–£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ. –ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: {updated_med}")
                await update.message.reply_text(f"‚úÖ –ü–æ–ª–µ '{field}' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {str(e)}", exc_info=True)
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

        finally:
            # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
            context.user_data.pop("edit_id", None)
            context.user_data.pop("edit_field", None)
            self.logger.info("–°–µ—Å—Å–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—á–∏—â–µ–Ω–∞")

        return ConversationHandler.END

    # –ú–µ—Ç–æ–¥—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    async def delete_medication(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        meds = self.db.get_medications(update.message.from_user.id)
        if not meds:
            await update.message.reply_text("‚ÑπÔ∏è –ù–µ—Ç –ª–µ–∫–∞—Ä—Å—Ç–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return

        keyboard = [
            [InlineKeyboardButton(f"{med[2]} (ID: {med[0]})", callback_data=f"delete_{med[0]}")]
            for med in meds
        ]
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def delete_confirm(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        med_id = int(query.data.split("_")[1])
        self.db.delete_medication(med_id)
        await query.edit_message_text("‚úÖ –õ–µ–∫–∞—Ä—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–æ!")

    # –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—à–∏–±–æ–∫
    async def list_medications(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            meds = self.db.get_medications(update.message.from_user.id)
            if not meds:
                await update.message.reply_text("‚ÑπÔ∏è –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ª–µ–∫–∞—Ä—Å—Ç–≤.")
                return

            text = "üíä –í–∞—à–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞:\n\n"
            current_date = datetime.now().date()

            for med in meds:
                try:
                    # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö
                    med_id, _, name, dose, intakes, start_date_str, duration_val, duration_unit, break_val, break_unit, cycles = med

                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã
                    if not start_date_str:
                        text += f"‚ö†Ô∏è {name} - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞\n"
                        continue

                    try:
                        start_date = datetime.strptime(start_date_str, "%Y-%m-%d").date()
                    except ValueError:
                        text += f"‚ö†Ô∏è {name} - –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞\n"
                        continue

                    # –†–∞—Å—á–µ—Ç –¥–Ω–µ–π
                    duration_days = duration_val if duration_unit == "days" else duration_val * 30
                    end_date = start_date + timedelta(days=duration_days)
                    days_left = (end_date - current_date).days

                    text += (
                        f"‚Ä¢ <b>{name}</b> (ID: {med_id})\n"
                        f"  üü¢ {dose} –∫–∞–ø—Å. √ó {intakes} —Ä/–¥–µ–Ω—å\n"
                        f"  üìÖ –ù–∞—á–∞–ª–æ: {start_date_str}\n"
                    )

                    if days_left > 0:
                        text += f"  ‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {days_left} –¥–Ω–µ–π\n\n"
                    else:
                        break_days = break_val if break_unit == "days" else break_val * 30
                        next_cycle = end_date + timedelta(days=break_days)
                        text += f"  ‚è∏Ô∏è –ü–µ—Ä–µ—Ä—ã–≤ –¥–æ {next_cycle.strftime('%d.%m.%Y')}\n\n"

                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ ID {med[0]}: {e}")
                    text += f"‚ö†Ô∏è –õ–µ–∫–∞—Ä—Å—Ç–≤–æ ID {med[0]} - –æ—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö\n\n"

            await update.message.reply_text(text, parse_mode="HTML")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    # –ú–µ—Ç–æ–¥ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    async def send_daily_notifications(self):
        try:
            all_meds = self.db.get_all_medications()
            if not all_meds:
                return

            current_date = datetime.now().date()

            for user_id in set(med[1] for med in all_meds):
                user_meds = [m for m in all_meds if m[1] == user_id]
                message = "üíä –õ–µ–∫–∞—Ä—Å—Ç–≤–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n"

                for med in user_meds:
                    try:
                        # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
                        _, _, name, dose, intakes, start_date_str, duration_val, duration_unit, break_val, break_unit, cycles = med

                        if not start_date_str:
                            continue

                        start_date = datetime.strptime(start_date_str, "%Y-%m-%d").date()
                        duration_days = duration_val if duration_unit == "days" else duration_val * 30
                        end_date = start_date + timedelta(days=duration_days)
                        days_left = (end_date - current_date).days

                        if days_left > 0:
                            message += (
                                f"‚Ä¢ <b>{name}</b>\n"
                                f"  {dose} –∫–∞–ø—Å. √ó {intakes} —Ä/–¥–µ–Ω—å\n"
                                f"  üìÖ –û—Å—Ç–∞–ª–æ—Å—å: {days_left} –¥–Ω–µ–π\n\n"
                            )
                        else:
                            break_days = break_val if break_unit == "days" else break_val * 30
                            next_cycle = end_date + timedelta(days=break_days)
                            message += (
                                f"‚Ä¢ <b>{name}</b>\n"
                                f"  ‚è∏Ô∏è –ü–µ—Ä–µ—Ä—ã–≤ –¥–æ {next_cycle.strftime('%d.%m.%Y')}\n\n"
                            )

                    except Exception as e:
                        self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
                        continue

                if len(message) > 10:  # –ï—Å–ª–∏ –µ—Å—Ç—å —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å
                    try:
                        await self.application.bot.send_message(user_id, message, parse_mode="HTML")
                    except Exception as e:
                        self.logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö: {e}")

    async def cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return ConversationHandler.END

    def run(self):
        self.application.run_polling()
