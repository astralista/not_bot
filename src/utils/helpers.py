from datetime import datetime, timedelta

def calculate_next_notification(start_date, intakes_per_day):
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–∏–µ–º–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞
    
    Args:
        start_date (datetime): –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –ø—Ä–∏–µ–º–∞
        intakes_per_day (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–µ–º–æ–≤ –≤ –¥–µ–Ω—å
    
    Returns:
        list: –°–ø–∏—Å–æ–∫ –≤—Ä–µ–º–µ–Ω —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
    """
    now = datetime.now()
    
    # –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–µ–º–æ–≤ –≤ –¥–µ–Ω—å —Ä–∞–≤–Ω–æ 1, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ 9:00
    if intakes_per_day == 1:
        return [datetime(now.year, now.month, now.day, 9, 0)]
    
    # –ï—Å–ª–∏ 2 –ø—Ä–∏–µ–º–∞ - –≤ 9:00 –∏ 21:00
    if intakes_per_day == 2:
        return [
            datetime(now.year, now.month, now.day, 9, 0),
            datetime(now.year, now.month, now.day, 21, 0)
        ]
    
    # –ï—Å–ª–∏ 3 –ø—Ä–∏–µ–º–∞ - –≤ 9:00, 15:00 –∏ 21:00
    if intakes_per_day == 3:
        return [
            datetime(now.year, now.month, now.day, 9, 0),
            datetime(now.year, now.month, now.day, 15, 0),
            datetime(now.year, now.month, now.day, 21, 0)
        ]
    
    # –î–ª—è –¥—Ä—É–≥–∏—Ö —Å–ª—É—á–∞–µ–≤ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –±–æ–¥—Ä—Å—Ç–≤–æ–≤–∞–Ω–∏—è (—Å 8:00 –¥–æ 22:00)
    waking_hours = 14  # 14 —á–∞—Å–æ–≤ –±–æ–¥—Ä—Å—Ç–≤–æ–≤–∞–Ω–∏—è
    interval = waking_hours / intakes_per_day
    
    notification_times = []
    for i in range(intakes_per_day):
        hour = 8 + int(i * interval)
        notification_times.append(datetime(now.year, now.month, now.day, hour, 0))
    
    return notification_times

def format_medication_info(medication):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–µ–∫–∞—Ä—Å—Ç–≤–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    
    Args:
        medication (tuple): –î–∞–Ω–Ω—ã–µ –æ –ª–µ–∫–∞—Ä—Å—Ç–≤–µ –∏–∑ –ë–î
    
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    """
    med_id, user_id, name, dose, intakes, start_date, duration_val, duration_unit, break_val, break_unit, cycles = medication
    
    current_date = datetime.now().date()
    start_date_obj = datetime.strptime(start_date, "%Y-%m-%d").date()
    
    duration_days = duration_val if duration_unit == "days" else duration_val * 30
    end_date = start_date_obj + timedelta(days=duration_days)
    days_left = (end_date - current_date).days
    
    if days_left > 0:
        status = f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {days_left} –¥–Ω–µ–π"
    else:
        break_days = break_val if break_unit == "days" else break_val * 30
        next_cycle = end_date + timedelta(days=break_days)
        status = f"‚è∏Ô∏è –ü–µ—Ä–µ—Ä—ã–≤ –¥–æ {next_cycle.strftime('%d.%m.%Y')}"
    
    return (
        f"‚Ä¢ <b>{name}</b> (ID: {med_id})\n"
        f"  üü¢ {dose} –∫–∞–ø—Å. √ó {intakes} —Ä/–¥–µ–Ω—å\n"
        f"  üìÖ –ù–∞—á–∞–ª–æ: {start_date}\n"
        f"  {status}"
    )
