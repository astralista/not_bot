from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime, timedelta
from ...core.database import Database
from ...utils.helpers import calculate_next_notification

class SchedulerService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º –∑–∞–¥–∞—á
    """
    def __init__(self, db: Database, bot_application):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        
        Args:
            db (Database): –≠–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            bot_application: –≠–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–æ—Ç–∞
        """
        self.db = db
        self.app = bot_application
        self.scheduler = AsyncIOScheduler(timezone="Europe/Moscow")
    
    def start(self):
        """
        –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        """
        self.scheduler.start()
    
    def setup_medication_checks(self):
        """
        –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
        """
        self.scheduler.add_job(
            self.check_medications,
            "interval",
            minutes=30,
            id="medication_check"
        )
    
    async def check_medications(self):
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–µ–∫–∞—Ä—Å—Ç–≤ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        """
        now = datetime.now()
        current_hour = now.hour
        current_minute = now.minute
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –∏–∑ –ë–î
        all_meds = self.db.get_all_medications()
        
        for med in all_meds:
            try:
                med_id, user_id, name, dose, intakes, start_date, duration_val, duration_unit, break_val, break_unit, cycles = med
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –ø—Ä–∏–µ–º –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ —Å–µ–π—á–∞—Å
                if not start_date:
                    continue
                
                start_date_obj = datetime.strptime(start_date, "%Y-%m-%d").date()
                current_date = now.date()
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–∏–µ–º–∞
                duration_days = duration_val if duration_unit == "days" else duration_val * 30
                end_date = start_date_obj + timedelta(days=duration_days)
                
                # –ï—Å–ª–∏ –∫—É—Ä—Å –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª—Å—è –∏–ª–∏ —É–∂–µ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                if current_date < start_date_obj or current_date > end_date:
                    continue
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–∞ –ø—Ä–∏–µ–º–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è
                notification_times = calculate_next_notification(start_date_obj, intakes)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Å –≤—Ä–µ–º–µ–Ω–µ–º –ø—Ä–∏–µ–º–∞
                for notification_time in notification_times:
                    if notification_time.hour == current_hour and abs(notification_time.minute - current_minute) <= 15:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                        await self.send_medication_reminder(user_id, name, dose)
                        break
            
            except Exception as e:
                self.app.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ {med[0]}: {e}")
    
    async def send_medication_reminder(self, user_id: int, med_name: str, dose: int):
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–∏–µ–º–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞
        
        Args:
            user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            med_name (str): –ù–∞–∑–≤–∞–Ω–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞
            dose (int): –î–æ–∑–∞ –ø—Ä–∏–µ–º–∞
        """
        try:
            message = f"üíä –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –ø—Ä–∏–º–∏—Ç–µ {dose} –∫–∞–ø—Å—É–ª(—ã) {med_name}"
            await self.app.bot.send_message(chat_id=user_id, text=message)
        except Exception as e:
            self.app.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
