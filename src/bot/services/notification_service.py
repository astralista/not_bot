from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime, timedelta
from ...core.database import Database
from ...utils.helpers import calculate_next_notification

class NotificationService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    """
    def __init__(self, db: Database, bot_application):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        
        Args:
            db (Database): –≠–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            bot_application: –≠–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–æ—Ç–∞
        """
        self.db = db
        self.app = bot_application
        self.scheduler = AsyncIOScheduler(timezone="Europe/Moscow")
    
    def start(self):
        """
        –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        """
        self.scheduler.start()
    
    def setup_daily_notifications(self):
        """
        –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É—Ç—Ä–µ–Ω–Ω–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        """
        for user_id in self.db.get_all_users():
            self.scheduler.add_job(
                self.send_daily_notification,
                'cron',
                hour=9,
                minute=0,
                args=[user_id],
                id=f"daily_{user_id}"
            )
    
    async def send_daily_notification(self, user_id: int):
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        
        Args:
            user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        try:
            from ...utils.services import Services
            
            sign = self.db.get_user_zodiac(user_id) or "–æ–≤–µ–Ω"  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            
            message = (
                "üåÖ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!\n\n" +
                Services.get_weather("Moscow") + "\n\n" +
                Services.get_weather("Brest,BY") + "\n\n" +
                Services.get_exchange_rates() + "\n\n" +
                Services.get_horoscope(sign) + "\n\n" +
                Services.get_daily_quote()
            )
            
            await self._send_message(user_id, message)
        except Exception as e:
            self.app.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
    
    async def send_medication_reminder(self, user_id: int, med_name: str, dose: int):
        """
        –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–∏–µ–º–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞
        
        Args:
            user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            med_name (str): –ù–∞–∑–≤–∞–Ω–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞
            dose (int): –î–æ–∑–∞ –ø—Ä–∏–µ–º–∞
        """
        message = f"üíä –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –ø—Ä–∏–º–∏—Ç–µ {dose} –∫–∞–ø—Å—É–ª(—ã) {med_name}"
        await self._send_message(user_id, message)
    
    async def send_medications_list(self, user_id: int):
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –ª–µ–∫–∞—Ä—Å—Ç–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        
        Args:
            user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        try:
            meds = self.db.get_medications(user_id)
            if not meds:
                await self._send_message(user_id, "‚ÑπÔ∏è –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ª–µ–∫–∞—Ä—Å—Ç–≤.")
                return
            
            from ...utils.helpers import format_medication_info
            
            text = "üíä –í–∞—à–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞:\n\n"
            for med in meds:
                try:
                    text += format_medication_info(med) + "\n\n"
                except Exception as e:
                    self.app.logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ {med[0]}: {e}")
                    text += f"‚ö†Ô∏è –õ–µ–∫–∞—Ä—Å—Ç–≤–æ ID {med[0]} - –æ—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö\n\n"
            
            await self._send_message(user_id, text, parse_mode="HTML")
        except Exception as e:
            self.app.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø–∏—Å–∫–∞ –ª–µ–∫–∞—Ä—Å—Ç–≤: {e}")
            await self._send_message(user_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    async def _send_message(self, user_id: int, text: str, parse_mode=None):
        """
        –û–±—â–∏–π –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        
        Args:
            user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            text (str): –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            parse_mode (str, optional): –†–µ–∂–∏–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é None.
        """
        try:
            await self.app.bot.send_message(
                chat_id=user_id, 
                text=text, 
                parse_mode=parse_mode
            )
        except Exception as e:
            self.app.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
